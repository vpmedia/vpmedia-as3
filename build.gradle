//
// =BEGIN CLOSED LICENSE
//
//  Copyright (c) 2013-2015 Andras Csizmadia
//  http://www.vpmedia.eu
//
//  For information about the licensing and copyright please
//  contact us at info@vpmedia.eu
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
// =END CLOSED LICENSE
//

// author: Andras Csizmadia

// needed for deploying
apply plugin: 'maven'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://raw.githubusercontent.com/vpmedia/mvnrepository/master'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

configurations {
    antClassPath
    compile
    test
}

dependencies {
    test group: 'org.apache', name: 'flexunit-tasks', version: '4.2.0-20140410', ext: 'jar'
    test group: 'org.apache', name: 'flexunit-as3', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-cilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-uilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'hamcrest-as3', version: '1.1.3', ext: 'swc'
    test group: 'org.apache', name: 'flex-pmd-ant-task', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-files', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-core', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-ruleset', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-ruleset-api', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-cpd', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-cpd-ant-task', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-metrics', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-metrics-ant-task', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'as3-parser', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'as3-parser-api', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'as3-plugin-utils', version: '1.3', ext: 'jar'
    test group: 'pmd', name: 'pmd', version: '4.2.5', ext: 'jar'
    test group: 'commons-lang', name: 'commons-lang', version: '2.4', ext: 'jar'
    test group: 'org.codehaus.plexus', name: 'plexus-utils', version: '3.0.17', ext: 'jar'
    antClassPath 'ant-contrib:ant-contrib:1.0b3', 'org.apache.ant:ant-junit:1.9.4'
}

// add additional jars to the AntBuilder classpath for use within the imported build.
ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antClassPath.each { File f ->
  antClassLoader.addURL(f.toURI().toURL())
} 

//----------------------------------
//  SDK
//----------------------------------

def AIR_HOME = System.getenv('AIR_HOME')
def FLEX_HOME = System.getenv('FLEX_HOME')
ant.FLEX_HOME = "${FLEX_HOME}"

//----------------------------------
//  Core
//----------------------------------

// Get version from Jenkins CI
if("${System.env.JENKINS_BUILD_VERSION}" != "null") {
    version = "${System.env.JENKINS_BUILD_VERSION}"
}

println "${group}.${project.name}-${version}"

//----------------------------------
//  Folders
//----------------------------------

def binDir = new File(projectDir, '/bin')
def buildDir = new File(projectDir, '/build')
def confDir = new File(projectDir, '/src/main/temp')
def publishDir = new File(projectDir, '/publish')
def reportDir = new File(projectDir, '/build/reports')
def tempDir = new File(projectDir, '/temp')
tempDir.mkdirs()
def tempDirPath = tempDir.absolutePath

//----------------------------------
//  Tasks
//----------------------------------

task clean_init << {
    if (binDir.isDirectory()) {
        delete(binDir)
    }
    if (buildDir.isDirectory()) {
        delete(buildDir)
    }
    if (confDir.isDirectory()) {
        delete(confDir)
    }
}

task copyDeps(type: Copy) {
    from configurations.all
    into binDir
}

task compile_init << {
    confDir.mkdirs()
    ant.copy(todir: 'src/main/temp') {
        fileset(dir : 'src/main/templates', includes: '*.*' )
    }    
    ant.replace(dir: "src/main/temp/", token: '${viewport_width}', value: '800')
    ant.replace(dir: "src/main/temp/", token: '${viewport_height}', value: '600')
    ant.replace(dir: "src/main/temp/", token: '${viewport_scale}', value: '1')
    ant.replace(dir: "src/main/temp/", token: '${version}', value: "${version}")
    ant.replace(dir: "src/main/temp/", token: '${debug}', value: 'true')
    ant.replace(dir: "src/main/temp/", token: '${player_version}', value: '19.0')
    ant.replace(dir: "src/main/temp/", token: '${swf_version}', value: '30')
    ant.replace(dir: "src/main/temp/", token: '${assets}', value: '')
    ant.replace(dir: "src/main/temp/", token: '${vars}', value: '')
}

task compile(type: JavaExec) { 
    main = "com.adobe.flash.compiler.clients.COMPC"
    classpath = files("${AIR_HOME}/lib/compiler.jar")
    workingDir = "${projectDir}"
    def argsList = [
                '-directory=false',
                '-inline=true',
                '-include-sources=src/main/actionscript',
                '-output=build/Main.swc',
                '-load-config+=src/main/temp/.flexConfig.xml', 
                '-library-path+=src/main/libs'             
            ]
    def airConfig = "${AIR_HOME}" + '/frameworks/air-config.xml'
    def loadAirConfig = '-load-config+='+"${airConfig}";
    argsList.push(loadAirConfig)
    args = argsList
}
            
task test << { 
    if (reportDir.isDirectory()) {
        delete("${reportDir}")
    }
    reportDir.mkdirs()
    ant.taskdef(resource: 'flexUnitTasks.tasks', classpath: configurations.test.asPath) 
    ant.flexunit(workingDir:'bin',toDir:'build/reports',haltonfailure:'false',verbose:'true',player:'flash',headless:'false',localTrusted:'true') {
        source(dir: 'src/main/actionscript')
        testSource(dir: 'src/test/actionscript') {
           include(name: '**/*Test.as')
        }
        library(dir: 'bin')
    }
    ant.junitreport(todir: reportDir) {
        fileset(dir: reportDir, includes: 'TEST-*.xml')
        report(format:'frames', todir:'build/reports/html')
    }
}
               
task analyze << { 
    reportDir.mkdirs()
    ant.taskdef(name: 'flexPmd', classname: 'com.adobe.ac.pmd.ant.FlexPmdAntTask', classpath: configurations.test.asPath)
    ant.taskdef(name: 'flexCpd', classname: 'com.adobe.ac.cpd.ant.FlexCpdAntTask', classpath: configurations.test.asPath)
    ant.flexPmd(sourceDirectory: 'src/main/actionscript/hu/vpmedia', outputDirectory: reportDir )
}
        
task document << { 
    ant.taskdef(resource: 'flexTasks.tasks', classpath: "${FLEX_HOME}/ant/lib/flexTasks.jar")
    ant.asdoc(output: 'build/docs', lenient: true) {
        'doc-sources'('src/main/actionscript')
        'compiler.source-path'('src/main/actionscript')
        'external-library-path'(dir: "${AIR_HOME}/frameworks/libs/air", append: true) {
            'include'(name: '*.swc')
        }
        'external-library-path'(dir: 'src/main/libs', append: true) {
            'include'(name: '*.swc')
        }
        'define'(name: 'APP::VERSION', value: '"0.0.1"')
        'define'(name: 'APP::DEBUG', value: 'true')
        'define'(name: 'RUNTIME::FLASH', value: 'true')
        'define'(name: 'RUNTIME::AIR', value: 'false')
        'define'(name: 'PLATFORM::WEB', value: 'true')
        'define'(name: 'PLATFORM::MOBILE', value: 'false')
        'define'(name: 'PLATFORM::DESKTOP', value: 'false')
    }
}

artifacts {
    archives file('build/Main.swc')
}

uploadArchives {
    repositories {
        mavenLocal() 
    }
}

compile.dependsOn copyDeps

defaultTasks 'clean_init', 'compile_init', 'compile', 'test', 'analyze'
